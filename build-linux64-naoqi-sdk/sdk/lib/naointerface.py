# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_naointerface', [dirname(__file__)])
        except ImportError:
            import _naointerface
            return _naointerface
        if fp is not None:
            try:
                _mod = imp.load_module('_naointerface', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _naointerface = swig_import_helper()
    del swig_import_helper
else:
    import _naointerface
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _naointerface.SHARED_PTR_DISOWN
class WorldObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorldObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorldObject, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _naointerface.new_WorldObject()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _naointerface.delete_WorldObject
    __del__ = lambda self : None;
    def getType(self): return _naointerface.WorldObject_getType(self)
    def setImageCenter(self, *args): return _naointerface.WorldObject_setImageCenter(self, *args)
    def setImageRadius(self, *args): return _naointerface.WorldObject_setImageRadius(self, *args)
    def setCameraId(self, *args): return _naointerface.WorldObject_setCameraId(self, *args)
    def setSeen(self, *args): return _naointerface.WorldObject_setSeen(self, *args)
    def setTimestamp(self, *args): return _naointerface.WorldObject_setTimestamp(self, *args)
    def getImageCenterX(self): return _naointerface.WorldObject_getImageCenterX(self)
    def getImageCenterY(self): return _naointerface.WorldObject_getImageCenterY(self)
    def getImageRadius(self): return _naointerface.WorldObject_getImageRadius(self)
    def getCameraId(self): return _naointerface.WorldObject_getCameraId(self)
    def isSeen(self): return _naointerface.WorldObject_isSeen(self)
    def getTimeStamp(self): return _naointerface.WorldObject_getTimeStamp(self)
    def reset(self): return _naointerface.WorldObject_reset(self)
    def copy(self, *args): return _naointerface.WorldObject_copy(self, *args)
WorldObject_swigregister = _naointerface.WorldObject_swigregister
WorldObject_swigregister(WorldObject)

class Ball(WorldObject):
    __swig_setmethods__ = {}
    for _s in [WorldObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ball, name, value)
    __swig_getmethods__ = {}
    for _s in [WorldObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ball, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _naointerface.new_Ball()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _naointerface.delete_Ball
    __del__ = lambda self : None;
    def getType(self): return _naointerface.Ball_getType(self)
    def testPython(self): return _naointerface.Ball_testPython(self)
Ball_swigregister = _naointerface.Ball_swigregister
Ball_swigregister(Ball)

class WorldObjectManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorldObjectManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorldObjectManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _naointerface.delete_WorldObjectManager
    __del__ = lambda self : None;
    def getWorldObject(self, *args): return _naointerface.WorldObjectManager_getWorldObject(self, *args)
    __swig_getmethods__["getInstance"] = lambda x: _naointerface.WorldObjectManager_getInstance
    if _newclass:getInstance = staticmethod(_naointerface.WorldObjectManager_getInstance)
    __swig_getmethods__["destroy"] = lambda x: _naointerface.WorldObjectManager_destroy
    if _newclass:destroy = staticmethod(_naointerface.WorldObjectManager_destroy)
WorldObjectManager_swigregister = _naointerface.WorldObjectManager_swigregister
WorldObjectManager_swigregister(WorldObjectManager)

def WorldObjectManager_getInstance():
  return _naointerface.WorldObjectManager_getInstance()
WorldObjectManager_getInstance = _naointerface.WorldObjectManager_getInstance

def WorldObjectManager_destroy():
  return _naointerface.WorldObjectManager_destroy()
WorldObjectManager_destroy = _naointerface.WorldObjectManager_destroy


def getGameBall():
  return _naointerface.getGameBall()
getGameBall = _naointerface.getGameBall
# This file is compatible with both classic and new-style classes.


